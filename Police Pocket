// This is the talkie library, the code works without including the library in my system, 
//but for for computer, the user needs to load the library
// #include <digitalWriteFast.h>
// #include <Talkie.h>
//#include <TalkieLPC.h>
//#include <TalkieUtils.h>
//#include <Vocab_Soundbites.h>
//#include <Vocab_Special.h>
//#include <Vocab_Toms_Diner.h>
//#include <Vocab_US_Acorn.h>
//#include <Vocab_US_Clock.h>
//#include <Vocab_US_Large.h>
//#include <Vocab_US_TI99.h>


#include <Adafruit_CircuitPlayground.h>
#include <Wire.h>
#include <SPI.h>



const uint8_t spINTRUDER[]  PROGMEM = {0xAB, 0x1D, 0xA9, 0x88, 0xCC, 0x37, 0x9F, 0x66, 0xBA, 0x16, 0x31, 0xFE, 0xBC, 0xEB, 0x55, 0x0F, 0xCF, 0x98, 0x69, 0x55, 0x47, 0xD3, 0x0C, 0xF2, 0xA4, 0x45, 0xAB, 0x6D, 0x6D, 0x43, 0x57, 0x34, 0xF8, 0x78, 0x34, 0x45, 0xA0, 0x08, 0xE5, 0x2E, 0x22, 0x1B, 0x14, 0xD0, 0x4A, 0x46, 0x06, 0x34, 0xD0, 0xD2, 0xEC, 0x39, 0xCC, 0xCC, 0xDD, 0xCC, 0x56, 0x9E, 0x95, 0x58, 0x14, 0xB5, 0xDB, 0x45, 0xAB, 0xAB, 0x27, 0x4B, 0xF6, 0x74, 0xA2, 0x62, 0xCE, 0xB2, 0x3C, 0x66, 0xB7, 0x7A, 0x2C, 0x0B, 0x61, 0x95, 0xBB, 0x96, 0x96, 0x4C, 0xD9, 0x35, 0xDB, 0x98, 0xAB, 0x29, 0xA2, 0xB3, 0x7C, 0x73, 0xED, 0x47, 0xBB, 0x4A, 0x2E, 0xD0, 0x71, 0x3F, 0xF9, 0x8B, 0x5F, 0xF8, 0x4A, 0x0F, 0xF4, 0xD1, 0x3C, 0xFF, 0x0F};
const uint8_t spALERT[]     PROGMEM = {0xA5, 0xCF, 0xC6, 0xAB, 0x55, 0x5B, 0xAF, 0x39, 0xDA, 0xC9, 0x54, 0xDD, 0xBC, 0xC6, 0xC2, 0x3C, 0x27, 0x20, 0xCF, 0x1C, 0xD7, 0x30, 0xB0, 0x45, 0x16, 0x69, 0x1D, 0xC3, 0x11, 0xE4, 0x59, 0x8A, 0x7C, 0xB5, 0x9B, 0x8B, 0xD9, 0x30, 0xB7, 0xD3, 0x76, 0x19, 0x9A, 0x25, 0x59, 0x57, 0x59, 0xEC, 0x11, 0xAF, 0xE8, 0xD9, 0xF9, 0x2A, 0x8A, 0x1D, 0xF0, 0x75, 0x3F, 0x73, 0xAC, 0x87, 0x3B, 0xA2, 0x0B, 0xAA, 0x2B, 0xCF, 0xE4, 0x10, 0xA1, 0xDC, 0x45, 0x64, 0x03, 0x00, 0x80, 0x01, 0x66, 0x36, 0x33, 0xC0, 0xAB, 0xD5, 0x0A, 0x68, 0x25, 0x85, 0x02, 0xFF, 0x0F};

#define ANALOG_INPUT  A5
// These defines set the range of expected analog values.
#define VALUE_MIN     700
#define VALUE_MAX     1000

// These defines set the range of pixel color when mapping
// to the sensor value.
#define COLOR_RED_MIN    0
#define COLOR_GREEN_MIN  0
#define COLOR_BLUE_MIN   255

#define COLOR_RED_MAX    255
#define COLOR_GREEN_MAX  0
#define COLOR_BLUE_MAX   0

void setup() {
  Serial.begin(115200);
  Serial.println("Circuit Playground Analog Sensor Demos!");
  CircuitPlayground.begin();
  pinMode(A1, INPUT_PULLUP);
}

void loop() {
// unmatching pins have been called out purposely
  // if (CircuitPlayground.slideSwitch()) {
  if ( ! digitalRead(A0) )
    if ( ! digitalRead(A2) )
      if ( ! digitalRead(A3) )
      { CircuitPlayground.speaker.begin();
        CircuitPlayground.speaker.say(spINTRUDER);
        CircuitPlayground.speaker.say(spALERT);
        CircuitPlayground.speaker.say(spINTRUDER);
        CircuitPlayground.speaker.say(spALERT);
        CircuitPlayground.speaker.say(spINTRUDER);
        CircuitPlayground.speaker.say(spALERT);
        CircuitPlayground.speaker.say(spINTRUDER);
        CircuitPlayground.speaker.say(spALERT);
        CircuitPlayground.speaker.say(spINTRUDER);
        CircuitPlayground.speaker.say(spALERT);
        CircuitPlayground.speaker.say(spINTRUDER);
        CircuitPlayground.speaker.say(spALERT);
        CircuitPlayground.speaker.say(spINTRUDER);
        CircuitPlayground.speaker.say(spALERT);
        CircuitPlayground.speaker.say(spINTRUDER);
        CircuitPlayground.speaker.say(spALERT);
      }

  uint16_t value = analogRead(ANALOG_INPUT);
  Serial.println(value, DEC);

  // Map the sensor value to a color. Use the range of min & max sensor values and
  // min/max colors to do the mapping.
  if (value < VALUE_MIN)      value = VALUE_MIN;
  else if (value > VALUE_MAX) value = VALUE_MAX;
  int red   = map(value, VALUE_MIN, VALUE_MAX, COLOR_RED_MIN  , COLOR_RED_MAX);
  int green = map(value, VALUE_MIN, VALUE_MAX, COLOR_GREEN_MIN, COLOR_GREEN_MAX);
  int blue  = map(value, VALUE_MIN, VALUE_MAX, COLOR_BLUE_MIN , COLOR_BLUE_MAX);

  // Gamma correction gives a more linear appearance to brightness ranges
  red   = CircuitPlayground.gamma8(red);
  green = CircuitPlayground.gamma8(green);
  blue  = CircuitPlayground.gamma8(blue);

  // Light up pixel
  CircuitPlayground.clearPixels();
  CircuitPlayground.setPixelColor(0, red, green, blue);
  CircuitPlayground.setPixelColor(1, red, green, blue);
  CircuitPlayground.setPixelColor(2, red, green, blue);
  CircuitPlayground.setPixelColor(3, red, green, blue);
  CircuitPlayground.setPixelColor(4, red, green, blue);
  CircuitPlayground.setPixelColor(5, red, green, blue);
  CircuitPlayground.setPixelColor(6, red, green, blue);
  CircuitPlayground.setPixelColor(7, red, green, blue);
  CircuitPlayground.setPixelColor(8, red, green, blue);
  CircuitPlayground.setPixelColor(9, red, green, blue);

  // Delay for a bit and repeat the loop.
  delay(10);

}
